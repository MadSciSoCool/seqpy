from ..pulses import Sequence
import numpy as np


class SeqcFile:
    def __init__(self, filepath="") -> None:
        self.file_string = ""
        self._indentation = False
        self.make_header()

    def make_header(self):
        self.comment_line("Auto generated by SeqPy")

    def define_placeholder(self, index, length):
        # declare placeholder
        self._writeline(f"wave w{index}_1 placeholder({length});")
        self._writeline(f"wave w{index}_2 placeholder({length});")
        # assign placeholder
        self._writeline(f"assignWaveIndex(w{index}_1, w{index}_2, 0);")

    def define_marker(self, length):
        self._writeline(f"wave marker_signal = marker({length},1);")

    def play_marker(self):
        self._writeline(f"playWave(1, marker_signal);")

    def wait(self, samples):
        self._writeline(f"playZero({samples});")
        # don't know the difference between playZero and wait yet
        # self._writeline(f"wait({samples});")

    def play_wave(self, index):
        self._writeline(f"playWave(w{index}_1, w{index}_2);")

    def start_main_loop(self, iterations):
        self._writeline(f"repeat({iterations}){{")
        self._indentation = True

    def end_main_loop(self):
        self._indentation = False
        self._writeline("}")

    def comment_line(self, str):
        self._writeline(f"// {str}")

    def _writeline(self, str):
        if self._indentation:
            self.file_string += f"\t{str}\n"
        else:
            self.file_string += f"{str}\n"


def seqc_generation(seq: Sequence, filepath: str = None):
    seqc_file = SeqcFile(filepath)
    # split the waveform before and after the trigger
    left_max = -np.inf
    right_min = +np.inf
    for channel in seq._pulses:
        for pulse_info in channel:
            position, pulse, carrier = pulse_info
            left = position + pulse._left
            right = position + pulse._left
            if left < seq._trigger_pos < right:
                raise Exception("trigger overlaps with one of the pulses")
            if left_max < right <= seq._trigger_pos:
                left_max = right
            if right_min > left >= seq._trigger_pos:
                right_min = left
    threshold = 3  # to be confirmed
    trig_length = 16  # to be confirmed
    if seq._trigger_pos - left_max < threshold or right_min - seq._trigger_pos < threshold:
        raise Exception("trigger is too close to one of the pulses")
    if right_min - left_max < threshold * 2 + trig_length:
        raise Exception("no space to play the trigger")

    # write the .seqC file
    seqc_file.define_marker()
    for i in range(nWaves):
        seqc_file.define_placeholder(i)
    # for

    retrun seqc_file
