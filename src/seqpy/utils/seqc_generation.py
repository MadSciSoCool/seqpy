from ..sequence import Sequence
from os import path


class SeqcFile:
    def __init__(self, filepath="") -> None:
        self.file_string = ""
        self._indentation = False
        self.make_header()
        self._filepath = path.join(filepath, "autogenerated.seqc")

    def make_file(self):
        with open(self._filepath, "w") as f:
            f.write(self.file_string)

    def make_header(self):
        self.comment_line("Auto generated by SeqPy")

    def define_placeholder(self, index, length):
        # declare placeholder
        self._writeline(f"wave w{index}_1 = placeholder({length:d}, true);")
        self._writeline(f"wave w{index}_2 = placeholder({length:d}, true);")
        # assign placeholder
        # self._writeline(f"assignWaveIndex(w{index}_1, w{index}_2, 0);")

    # def define_marker(self, length, position):
    #     self._writeline(f"wave marker_left = marker({position},0);")
    #     self._writeline(f"wave marker_right = marker({length-position},1);")
    #     self._writeline(f"wave marker_seq = join(marker_left, marker_right);")

    # def play_marker(self):
    #     self._writeline(f"playWave(1, marker_signal);")

    def wait(self, samples):
        self._writeline(f"playZero({int(samples):d});")
        # don't know the difference between playZero and wait yet
        # self._writeline(f"wait({int(samples):d});")

    def play_wave(self, index):
        self._writeline(f"playWave(w{index}_1, w{index}_2);")

    def start_main_loop(self, iterations):
        self._writeline(f"repeat({int(iterations):d}){{")
        self._indentation = True

    def end_main_loop(self):
        self._indentation = False
        self._writeline("}")

    def comment_line(self, str):
        self._writeline(f"// {str}")

    def _writeline(self, str):
        if self._indentation:
            self.file_string += f"\t{str}\n"
        else:
            self.file_string += f"{str}\n"


def seqc_generation(sequence: Sequence, filepath: str = ""):
    # write the .seqC file
    wave_length = sequence.length()
    seqc_file = SeqcFile(filepath)
    seqc_file.define_placeholder(0, wave_length)
    seqc_file.start_main_loop(sequence.repetitions)
    seqc_file.play_wave(0)
    seqc_file.wait(sequence.period - wave_length)  # offset to be confirmed
    seqc_file.end_main_loop()
    return seqc_file
